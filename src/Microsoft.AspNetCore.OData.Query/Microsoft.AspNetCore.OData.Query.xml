<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.OData.Query</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators">
            <summary>
            Arithmetic operators to allow for querying using $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators.None">
            <summary>
            A value that corresponds to allowing no arithmetic operators in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators.Add">
            <summary>
            A value that corresponds to allowing 'Add' arithmetic operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators.Subtract">
            <summary>
            A value that corresponds to allowing 'Subtract' arithmetic operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators.Multiply">
            <summary>
            A value that corresponds to allowing 'Multiply' arithmetic operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators.Divide">
            <summary>
            A value that corresponds to allowing 'Divide' arithmetic operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators.Modulo">
            <summary>
            A value that corresponds to allowing 'Modulo' arithmetic operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedArithmeticOperators.All">
            <summary>
            A value that corresponds to allowing all arithmetic operators in $filter.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.AllowedFunctions">
            <summary>
            Functions to allow for querying using $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.None">
            <summary>
            A value that corresponds to allowing no functions in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.StartsWith">
            <summary>
            A value that corresponds to allowing 'StartsWith' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.EndsWith">
            <summary>
            A value that corresponds to allowing 'EndsWith' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Contains">
            <summary>
            A value that corresponds to allowing 'Contains' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Length">
            <summary>
            A value that corresponds to allowing 'Length' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.IndexOf">
            <summary>
            A value that corresponds to allowing 'IndexOf' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Concat">
            <summary>
            A value that corresponds to allowing 'Concat' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Substring">
            <summary>
            A value that corresponds to allowing 'Substring' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.ToLower">
            <summary>
            A value that corresponds to allowing 'ToLower' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.ToUpper">
            <summary>
            A value that corresponds to allowing 'ToUpper' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Trim">
            <summary>
            A value that corresponds to allowing 'Trim' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Cast">
            <summary>
            A value that corresponds to allowing 'Cast' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Year">
            <summary>
            A value that corresponds to allowing 'Year' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Date">
            <summary>
            A value that corresponds to allowing 'Date' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Month">
            <summary>
            A value that corresponds to allowing 'Month' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Time">
            <summary>
            A value that corresponds to allowing 'Time' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Day">
            <summary>
            A value that corresponds to allowing 'Day' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Hour">
            <summary>
            A value that corresponds to allowing 'Hour' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Minute">
            <summary>
            A value that corresponds to allowing 'Minute' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Second">
            <summary>
            A value that corresponds to allowing 'Second' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.FractionalSeconds">
            <summary>
            A value that corresponds to allowing 'Fractionalseconds' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Round">
            <summary>
            A value that corresponds to allowing 'Round' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Floor">
            <summary>
            A value that corresponds to allowing 'Floor' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Ceiling">
            <summary>
            A value that corresponds to allowing 'Ceiling' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.IsOf">
            <summary>
            A value that corresponds to allowing 'IsOf' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.Any">
            <summary>
            A value that corresponds to allowing 'Any' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.All">
            <summary>
            A value that corresponds to allowing 'All' function in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.AllStringFunctions">
            <summary>
            A value that corresponds to allowing all string related functions in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.AllDateTimeFunctions">
            <summary>
            A value that corresponds to allowing all datetime related functions in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.AllMathFunctions">
            <summary>
            A value that corresponds to allowing math related functions in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedFunctions.AllFunctions">
            <summary>
            A value that corresponds to allowing all functions in $filter.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators">
            <summary>
            Logical operators to allow for querying using $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.None">
            <summary>
            A value that corresponds to allowing no logical operators in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.Or">
            <summary>
            A value that corresponds to allowing 'Or' logical operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.And">
            <summary>
            A value that corresponds to allowing 'And' logical operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.Equal">
            <summary>
            A value that corresponds to allowing 'Equal' logical operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.NotEqual">
            <summary>
            A value that corresponds to allowing 'NotEqual' logical operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.GreaterThan">
            <summary>
            A value that corresponds to allowing 'GreaterThan' logical operator in $filter.
            </summary>   
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.GreaterThanOrEqual">
            <summary>
            A value that corresponds to allowing 'GreaterThanOrEqual' logical operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.LessThan">
            <summary>
            A value that corresponds to allowing 'LessThan' logical operator in $filter.
            </summary>  
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.LessThanOrEqual">
            <summary>
            A value that corresponds to allowing 'LessThanOrEqual' logical operator in $filter.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.Not">
            <summary>
            A value that corresponds to allowing 'Not' logical operator in $filter.
            </summary>  
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.Has">
            <summary>
            A value that corresponds to allowing 'Has' logical operator in $filter.
            </summary>  
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedLogicalOperators.All">
            <summary>
            A value that corresponds to allowing all logical operators in $filter.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions">
            <summary>
            OData query options to allow for querying.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.None">
            <summary>
            A value that corresponds to allowing no query options.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Filter">
            <summary>
            A value that corresponds to allowing the $filter query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Expand">
            <summary>
            A value that corresponds to allowing the $expand query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Select">
            <summary>
            A value that corresponds to allowing the $select query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.OrderBy">
            <summary>
            A value that corresponds to allowing the $orderby query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Top">
            <summary>
            A value that corresponds to allowing the $top query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Skip">
            <summary>
            A value that corresponds to allowing the $skip query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Count">
            <summary>
            A value that corresponds to allowing the $count query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Format">
            <summary>
            A value that corresponds to allowing the $format query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.SkipToken">
            <summary>
            A value that corresponds to allowing the $skiptoken query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.DeltaToken">
            <summary>
            A value that corresponds to allowing the $deltatoken query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Apply">
            <summary>
            A value that corresponds to allowing the $apply query option.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.Supported">
            <summary>
            A value that corresponds to the default query options supported.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.AllowedQueryOptions.All">
            <summary>
            A value that corresponds to allowing all query options.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ClrSafeFunctions">
            <summary>
            This class contains safe equivalents of CLR functions that
            could throw exceptions at runtime.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Container.AggregationPropertyContainer">
            <summary>
            Reperesent properties used in groupby and aggregate clauses to make them accessiable in further clauses/transformations
            </summary>
            <remakrs>
            When we have $apply=groupby((Prop1,Prop2, Prop3))&amp;$orderby=Prop1, Prop2
            We will have following expression in .GroupBy
            $it => new AggregationPropertyContainer() {
                Name = "Prop1", 
                Value = $it.Prop1, // string
                Next = new AggregationPropertyContainer() {
                    Name = "Prop2",
                    Value = $it.Prop2, // int
                    Next = new LastInChain() {
                        Name = "Prop3",
                        Value = $it.Prop3
                    }
                }
            }
            when in $orderby (see AggregationBinder CollectProperties method)
            Prop1 could be referenced us $it => (string)$it.Value
            Prop2 could be referenced us $it => (int)$it.Next.Value
            Prop3 could be referenced us $it => (int)$it.Next.Next.Value
            Generic type for Value is used to avoid type casts for on primitive types that not supported in EF
            
            Also we have 4 use cases and base type have all requiered properties to support no cast usage. 
            1. Primitive property with Next
            2. Primitive property without Next
            3. Nested property with Next
            4. Nested property without Next
            However, EF doesn't allow to set different properties for the same type in two places in an lamba-expression => using new type with just new name to workaround that issue
            
            </remakrs>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Container.ITruncatedCollection">
            <summary>
            Represents a collection that is truncated to a given page size.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Container.ITruncatedCollection.PageSize">
            <summary>
            Gets the page size the collection is truncated to.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Container.ITruncatedCollection.IsTruncated">
            <summary>
            Gets a value representing if the collection is truncated or not.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Container.NamedPropertyExpression">
            <summary>
            Represents a container that captures a named property that is a part of the select expand query.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Container.PropertyContainer">
            <summary>
            A container of property names and property values.
            </summary>
            <remarks>
            EntityFramework understands only member initializations in Select expressions. Also, it doesn't understand type casts for non-primitive types. So, 
            SelectExpandBinder has to generate strongly types expressions that involve only property access. This class represents the base class for a bunch of 
            generic derived types that are used in the expressions that SelectExpandBinder generates.
            Also, Expression.Compile() could fail with stack overflow if expression is to deep and causes too many levels of recursion. To avoid that we are b-tree property container.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.PropertyContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Container.PropertyContainer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.PropertyContainer.ToDictionary(Microsoft.AspNetCore.OData.Abstracts.Query.IPropertyMapper,System.Boolean)">
            <summary>
            Builds the dictionary of properties in this container keyed by the property name.
            </summary>
            <returns>The dictionary of properties in this container keyed by the property name.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.PropertyContainer.ToDictionaryCore(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.AspNetCore.OData.Abstracts.Query.IPropertyMapper,System.Boolean)">
            <summary>
            Adds the properties in this container to the given dictionary.
            </summary>
            <param name="dictionary">The dictionary to add the properties to.</param>
            <param name="includeAutoSelected">Specifies whether auto selected properties should be included.</param>
            <param name="propertyMapper">An object responsible to map the properties in this property container to the
            the value that will be used as the key in the dictionary we are adding properties to.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1">
            <summary>
            Represents a class that truncates a collection to a given page size.
            </summary>
            <typeparam name="T">The collection element type.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1"/> class.
            </summary>
            <param name="source">The collection to be truncated.</param>
            <param name="pageSize">The page size.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.#ctor(System.Linq.IQueryable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1"/> class.
            </summary>
            <param name="source">The queryable collection to be truncated.</param>
            <param name="pageSize">The page size.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1"/> class.
            </summary>
            <param name="source">The queryable collection to be truncated.</param>
            <param name="pageSize">The page size.</param>
            <param name="parameterize">Flag indicating whether constants should be parameterized</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1"/> class.
            </summary>
            <param name="source">The queryable collection to be truncated.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalCount">The total count.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1"/> class.
            </summary>
            <param name="source">The queryable collection to be truncated.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalCount">The total count.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1"/> class.
            </summary>
            <param name="source">The queryable collection to be truncated.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalCount">The total count.</param>
            <param name="parameterize">Flag indicating whether constants should be parameterized</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.PageSize">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.IsTruncated">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Container.TruncatedCollection`1.TotalCount">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute">
            <summary>
            This class defines an attribute that can be applied to an action to enable querying using the OData query
            syntax. To avoid processing unexpected or malicious queries, use the validation settings on
            <see cref="T:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute"/> to validate incoming queries. For more information, visit
            http://go.microsoft.com/fwlink/?LinkId=279712.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.#ctor">
            <summary>
            Enables a controller action to support OData query parameters.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.EnsureStableOrdering">
            <summary>
            Gets or sets a value indicating whether query composition should
            alter the original query when necessary to ensure a stable sort order.
            </summary>
            <value>A <c>true</c> value indicates the original query should
            be modified when necessary to guarantee a stable sort order.
            A <c>false</c> value indicates the sort order can be considered
            stable without modifying the query.  Query providers that ensure
            a stable sort order should set this value to <c>false</c>.
            The default value is <c>true</c>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.HandleNullPropagation">
            <summary>
            Gets or sets a value indicating how null propagation should
            be handled during query composition.
            </summary>
            <value>
            The default is <see cref="F:Microsoft.AspNetCore.OData.Query.HandleNullPropagationOption.Default"/>.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.EnableConstantParameterization">
            <summary>
            Gets or sets a value indicating whether constants should be parameterized. Parameterizing constants
            would result in better performance with Entity framework.
            </summary>
            <value>The default value is <c>true</c>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.EnableCorrelatedSubqueryBuffering">
            <summary>
            Gets or sets a value indicating whether queries with expanded navigations should be formulated
            to encourage correlated subquery results to be buffered.
            Buffering correlated subquery results can reduce the number of queries from N + 1 to 2
            by buffering results from the subquery.
            </summary>
            <value>The default value is <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.MaxAnyAllExpressionDepth">
            <summary>
            Gets or sets the maximum depth of the Any or All elements nested inside the query. This limit helps prevent
            Denial of Service attacks.
            </summary>
            <value>
            The maximum depth of the Any or All elements nested inside the query. The default value is 1.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.MaxNodeCount">
            <summary>
            Gets or sets the maximum number of nodes inside the $filter syntax tree.
            </summary>
            <value>The default value is 100.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.PageSize">
            <summary>
            Gets or sets the maximum number of query results to send back to clients.
            </summary>
            <value>
            The maximum number of query results to send back to clients.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.HandleReferenceNavigationPropertyExpandFilter">
            <summary>
            Honor $filter inside $expand of non-collection navigation property.
            The expanded property is only populated when the filter evaluates to true.
            This setting is false by default.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.AllowedQueryOptions">
            <summary>
            Gets or sets the query parameters that are allowed in queries.
            </summary>
            <value>The default includes all query options: $filter, $skip, $top, $orderby, $expand, $select, $count,
            $format, $skiptoken and $deltatoken.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.AllowedFunctions">
            <summary>
            Gets or sets a value that represents a list of allowed functions used in the $filter query. Supported
            functions include the following:
            <list type="definition">
            <item>
            <term>String related:</term>
            <description>contains, endswith, startswith, length, indexof, substring, tolower, toupper, trim,
            concat e.g. ~/Customers?$filter=length(CompanyName) eq 19</description>
            </item>
            <item>
            <term>DateTime related:</term>
            <description>year, month, day, hour, minute, second, fractionalseconds, date, time
            e.g. ~/Employees?$filter=year(BirthDate) eq 1971</description>
            </item>
            <item>
            <term>Math related:</term>
            <description>round, floor, ceiling</description>
            </item>
            <item>
            <term>Type related:</term>
            <description>isof, cast</description>
            </item>
            <item>
            <term>Collection related:</term>
            <description>any, all</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.AllowedArithmeticOperators">
            <summary>
            Gets or sets a value that represents a list of allowed arithmetic operators including 'add', 'sub', 'mul',
            'div', 'mod'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.AllowedLogicalOperators">
            <summary>
            Gets or sets a value that represents a list of allowed logical Operators such as 'eq', 'ne', 'gt', 'ge',
            'lt', 'le', 'and', 'or', 'not'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.AllowedOrderByProperties">
             <summary>
             <para>Gets or sets a string with comma separated list of property names. The queryable result can only be
             ordered by those properties defined in this list.</para>
            
             <para>Note, by default this string is null, which means it can be ordered by any property.</para>
            
             <para>For example, setting this value to null or empty string means that we allow ordering the queryable
             result by any properties. Setting this value to "Name" means we only allow queryable result to be ordered
             by Name property.</para>
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.MaxSkip">
            <summary>
            Gets or sets the max value of $skip that a client can request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.MaxTop">
            <summary>
            Gets or sets the max value of $top that a client can request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.MaxExpansionDepth">
            <summary>
            Gets or sets the max expansion depth for the $expand query option. To disable the maximum expansion depth
            check, set this property to 0.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.MaxOrderByNodeCount">
            <summary>
            Gets or sets the maximum number of expressions that can be present in the $orderby.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Performs the query composition after action is executed. It first tries to retrieve the IQueryable from the
            returning response message. It then validates the query from uri based on the validation settings on
            <see cref="T:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute"/>. It finally applies the query appropriately, and reset it back on
            the response message.
            </summary>
            <param name="actionExecutedContext">The context related to this action, including the response message,
            request message and HttpConfiguration etc.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.OnActionExecuted(System.Object,System.Linq.IQueryable,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpRequest,System.Action{System.Net.HttpStatusCode},System.Action{System.Net.HttpStatusCode,System.String,System.Exception})">
            <summary>
            Performs the query composition after action is executed. It first tries to retrieve the IQueryable from the
            returning response message. It then validates the query from uri based on the validation settings on
            <see cref="T:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute"/>. It finally applies the query appropriately, and reset it back on
            the response message.
            </summary>
            <param name="responseValue">The response content value.</param>
            <param name="singleResultCollection">The content as SingleResult.Queryable.</param>
            <param name="actionDescriptor">The action context, i.e. action and controller name.</param>
            <param name="request">The internal request.</param>
            <param name="modelFunction">A function to get the model.</param>
            <param name="createQueryOptionFunction">A function used to create and validate query options.</param>
            <param name="createResponseAction">An action used to create a response.</param>
            <param name="createErrorAction">A function used to generate error response.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.EnableQueryAttribute.IsSuccessStatusCode(System.Int32)">
            <summary>
            Determine if the status code indicates success.
            </summary>
            <param name="statusCode">The status code.</param>
            <returns>True if the response has a success status code; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ETag">
            <summary>
            The ETag parsed from request.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ETag.#ctor">
            <summary>
            Create an instance of <see cref="T:Microsoft.AspNetCore.OData.Query.ETag"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ETag.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ETag.IsWellFormed">
            <summary>
            Gets or sets whether the ETag is well-formed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ETag.EntityType">
            <summary>
            Gets or sets an entity type of the ETag.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ETag.IsAny">
            <summary>
            Gets or sets whether the ETag is corresponding to "*".
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ETag.IsIfNoneMatch">
            <summary>
            Gets or sets whether If-None-Match set in the request header.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ETag.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets a property value from the ETag.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ETag.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Sets a property value to ETag.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ETag.ApplyTo(System.Linq.IQueryable)">
            <summary>
            Apply the ETag to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the ETag has been applied to.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ETag`1">
            <summary>
            OData ETag of an entity type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">TEntity is the type of entity.</typeparam>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ETag`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.AspNetCore.OData.Query.ETag`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ETag`1.ApplyTo(System.Linq.IQueryable)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ETag`1.ApplyTo(System.Linq.IQueryable{`0})">
            <summary>
            Apply the ETag to the given <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable`1"/>.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable`1"/> after the ETag has been applied.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.AggregationBinder.FlattenReferencedProperties(System.Linq.IQueryable)">
            <summary>
            Pre flattens properties referenced in aggregate clause to avoid generation of nested queries by EF.
            For query like groupby((A), aggregate(B/C with max as Alias1, B/D with max as Alias2)) we need to generate 
            .Select(
                $it => new FlattenninWrapper () {
                    Source = $it, // Will used in groupby stage
                    Container = new {
                        Value = $it.B.C
                        Next = new {
                            Value = $it.B.D
                        }
                    }
                }
            )
            Also we need to populate expressions to access B/C and B/D in aggregate stage. It will look like:
            B/C : $it.Container.Value
            B/D : $it.Container.Next.Value
            </summary>
            <param name="query"></param>
            <returns>Query with Select that flattens properties</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase">
            <summary>
            The base class for all expression binders.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.BaseQuery">
            <summary>
            Base query used for the binder.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.FlattenedPropertyContainer">
            <summary>
            Flattened list of properties from base query, for case when binder is applied for aggregated query.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase"/> class.
            </summary>
            <param name="requestContainer">The request container.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.GetDynamicPropertyContainer(Microsoft.OData.UriParser.SingleValueOpenPropertyAccessNode)">
            <summary>
            Gets property for dynamic properties dictionary.
            </summary>
            <param name="openNode"></param>
            <returns>Returns CLR property for dynamic properties container.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.EnsureFlattenedPropertyContainer(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Analyze previous query and extract grouped properties.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.GetFlattenedPropertyExpression(System.String)">
            <summary>
            Gets expression for property from previously aggregated query
            </summary>
            <param name="propertyPath"></param>
            <returns>Returns null if no aggregations were used so far</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.GuidCompare(System.Guid,System.Guid)">
            <summary>
            Compares two guids
            </summary>
            <param name="firstValue"></param>
            <param name="secondValue"></param>
            <returns>An integer value based on the Guid's CompareTo method</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.IsFlatteningSource(System.Linq.Expressions.Expression)">
            <summary>
            Recognize $it.Source where $it is FlatteningWrapper
            Using that do avoid wrapping it redundant into Null propagation 
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.Bind(Microsoft.OData.UriParser.QueryNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.QueryNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that represents the semantics
            of the <see cref="T:Microsoft.OData.UriParser.QueryNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.Parameter">
            <summary>
            Gets $it parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.BindConstantNode(Microsoft.OData.UriParser.ConstantNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.ConstantNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.ConstantNode"/>.
            </summary>
            <param name="constantNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.BindSingleValueFunctionCallNode(Microsoft.OData.UriParser.SingleValueFunctionCallNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.SingleValueFunctionCallNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.SingleValueFunctionCallNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.BindCollectionConstantNode(Microsoft.OData.UriParser.CollectionConstantNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.CollectionConstantNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.CollectionConstantNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.ExpressionBinderBase.BindArguments(System.Collections.Generic.IEnumerable{Microsoft.OData.UriParser.QueryNode})">
            <summary>
            Bind function arguments
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder">
            <summary>
            Translates an OData $filter parse tree represented by <see cref="T:Microsoft.OData.UriParser.FilterClause"/> to
            an <see cref="T:System.Linq.Expressions.Expression"/> and applies it to an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder"/> class.
            </summary>
            <param name="requestContainer">The request container.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.Bind(Microsoft.OData.UriParser.QueryNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.QueryNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that represents the semantics
            of the <see cref="T:Microsoft.OData.UriParser.QueryNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindDynamicPropertyAccessQueryNode(Microsoft.OData.UriParser.SingleValueOpenPropertyAccessNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.SingleValueOpenPropertyAccessNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.SingleValueOpenPropertyAccessNode"/>.
            </summary>
            <param name="openNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindSingleResourceFunctionCallNode(Microsoft.OData.UriParser.SingleResourceFunctionCallNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.SingleResourceFunctionCallNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.SingleResourceFunctionCallNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindSingleResourceCastNode(Microsoft.OData.UriParser.SingleResourceCastNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.SingleResourceCastNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.SingleResourceCastNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindCollectionResourceCastNode(Microsoft.OData.UriParser.CollectionResourceCastNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.CollectionResourceCastNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.CollectionResourceCastNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindNavigationPropertyNode(Microsoft.OData.UriParser.QueryNode,Microsoft.OData.Edm.IEdmNavigationProperty)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.Edm.IEdmNavigationProperty"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.Edm.IEdmNavigationProperty"/>.
            </summary>
            <param name="sourceNode">The node that represents the navigation source.</param>
            <param name="navigationProperty">The navigation property to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindNavigationPropertyNode(Microsoft.OData.UriParser.QueryNode,Microsoft.OData.Edm.IEdmNavigationProperty,System.String)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.Edm.IEdmNavigationProperty"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.Edm.IEdmNavigationProperty"/>.
            </summary>
            <param name="sourceNode">The node that represents the navigation source.</param>
            <param name="navigationProperty">The navigation property to bind.</param>
            <param name="propertyPath">The property path.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindBinaryOperatorNode(Microsoft.OData.UriParser.BinaryOperatorNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.BinaryOperatorNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.BinaryOperatorNode"/>.
            </summary>
            <param name="binaryOperatorNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindInNode(Microsoft.OData.UriParser.InNode)">
            <summary>
            Binds an <see cref="T:Microsoft.OData.UriParser.InNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.InNode"/>.
            </summary>
            <param name="inNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindConvertNode(Microsoft.OData.UriParser.ConvertNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.ConvertNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.ConvertNode"/>.
            </summary>
            <param name="convertNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindRangeVariable(Microsoft.OData.UriParser.RangeVariable)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.RangeVariable"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.RangeVariable"/>.
            </summary>
            <param name="rangeVariable">The range variable to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindCollectionPropertyAccessNode(Microsoft.OData.UriParser.CollectionPropertyAccessNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.CollectionPropertyAccessNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.CollectionPropertyAccessNode"/>.
            </summary>
            <param name="propertyAccessNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindCollectionComplexNode(Microsoft.OData.UriParser.CollectionComplexNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.CollectionComplexNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.CollectionComplexNode"/>.
            </summary>
            <param name="collectionComplexNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindPropertyAccessQueryNode(Microsoft.OData.UriParser.SingleValuePropertyAccessNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.SingleValuePropertyAccessNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.SingleValuePropertyAccessNode"/>.
            </summary>
            <param name="propertyAccessNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindSingleComplexNode(Microsoft.OData.UriParser.SingleComplexNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.SingleComplexNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.SingleComplexNode"/>.
            </summary>
            <param name="singleComplexNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindUnaryOperatorNode(Microsoft.OData.UriParser.UnaryOperatorNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.UnaryOperatorNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.UnaryOperatorNode"/>.
            </summary>
            <param name="unaryOperatorNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindAllNode(Microsoft.OData.UriParser.AllNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.AllNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.AllNode"/>.
            </summary>
            <param name="allNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindAnyNode(Microsoft.OData.UriParser.AnyNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.AnyNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that
            represents the semantics of the <see cref="T:Microsoft.OData.UriParser.AnyNode"/>.
            </summary>
            <param name="anyNode">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.Parameter">
            <summary>
            Get $it parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindSingleValueNode(Microsoft.OData.UriParser.SingleValueNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.SingleValueNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that represents the semantics
            of the <see cref="T:Microsoft.OData.UriParser.SingleValueNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.FilterBinder.BindCollectionNode(Microsoft.OData.UriParser.CollectionNode)">
            <summary>
            Binds a <see cref="T:Microsoft.OData.UriParser.CollectionNode"/> to create a LINQ <see cref="T:System.Linq.Expressions.Expression"/> that represents the semantics
            of the <see cref="T:Microsoft.OData.UriParser.CollectionNode"/>.
            </summary>
            <param name="node">The node to bind.</param>
            <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression"/> created.</returns>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.Expressions.Linq2ObjectsComparisonMethods.AreByteArraysEqualMethodInfo">
            <summary>Method info for byte array comparison.</summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.Expressions.Linq2ObjectsComparisonMethods.AreByteArraysNotEqualMethodInfo">
            <summary>Method info for byte array comparison.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.Linq2ObjectsComparisonMethods.AreByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>Compares two byte arrays for equality.</summary>
            <param name="left">First byte array.</param>
            <param name="right">Second byte array.</param>
            <returns>true if the arrays are equal; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.Linq2ObjectsComparisonMethods.AreByteArraysNotEqual(System.Byte[],System.Byte[])">
            <summary>Compares two byte arrays for equality.</summary>
            <param name="left">First byte array.</param>
            <param name="right">Second byte array.</param>
            <returns>true if the arrays are not equal; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder">
            <summary>
            Applies the given <see cref="T:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption"/> to the given <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder.GetSelectExpandProperties(Microsoft.OData.Edm.IEdmModel,Microsoft.OData.Edm.IEdmStructuredType,Microsoft.OData.Edm.IEdmNavigationSource,Microsoft.OData.UriParser.SelectExpandClause,System.Collections.Generic.IDictionary{Microsoft.OData.Edm.IEdmStructuralProperty,Microsoft.OData.UriParser.PathSelectItem}@,System.Collections.Generic.IDictionary{Microsoft.OData.Edm.IEdmNavigationProperty,Microsoft.OData.UriParser.ExpandedReferenceSelectItem}@,System.Collections.Generic.ISet{Microsoft.OData.Edm.IEdmStructuralProperty}@)">
            <summary>
            Gets the $select and $expand properties from the given <see cref="T:Microsoft.OData.UriParser.SelectExpandClause"/>
            </summary>
            <param name="model">The Edm model.</param>
            <param name="structuredType">The current structural type.</param>
            <param name="navigationSource">The current navigation source.</param>
            <param name="selectExpandClause">The given select and expand clause.</param>
            <param name="propertiesToInclude">The out properties to include at current level, could be null.</param>
            <param name="propertiesToExpand">The out properties to expand at current level, could be null.</param>
            <param name="autoSelectedProperties">The out auto selected properties to include at current level, could be null.</param>
            <returns>true if the select contains dynamic property selection, false if it's not.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder.ProcessExpandedItem(Microsoft.OData.UriParser.ExpandedReferenceSelectItem,Microsoft.OData.Edm.IEdmNavigationSource,System.Collections.Generic.IDictionary{Microsoft.OData.Edm.IEdmStructuralProperty,Microsoft.AspNetCore.OData.Abstracts.Query.SelectExpandIncludedProperty},System.Collections.Generic.IDictionary{Microsoft.OData.Edm.IEdmNavigationProperty,Microsoft.OData.UriParser.ExpandedReferenceSelectItem}@)">
            <summary>
            Process the <see cref="T:Microsoft.OData.UriParser.ExpandedReferenceSelectItem"/>.
            </summary>
            <param name="expandedItem">The expaned item.</param>
            <param name="navigationSource">The navigation source.</param>
            <param name="currentLevelPropertiesInclude">The current level properties included.</param>
            <param name="propertiesToExpand">out/ref, the property expanded.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder.ProcessSelectedItem(Microsoft.OData.UriParser.PathSelectItem,Microsoft.OData.Edm.IEdmNavigationSource,System.Collections.Generic.IDictionary{Microsoft.OData.Edm.IEdmStructuralProperty,Microsoft.AspNetCore.OData.Abstracts.Query.SelectExpandIncludedProperty})">
            <summary>
            Process the <see cref="T:Microsoft.OData.UriParser.PathSelectItem"/>.
            </summary>
            <param name="pathSelectItem">The selected item.</param>
            <param name="navigationSource">The navigation source.</param>
            <param name="currentLevelPropertiesInclude">The current level properties included.</param>
            <returns>true if it's dynamic property selection, false if it's not.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder.BuildExpandedProperty(System.Linq.Expressions.Expression,Microsoft.OData.Edm.IEdmStructuredType,Microsoft.OData.Edm.IEdmNavigationProperty,Microsoft.OData.UriParser.ExpandedReferenceSelectItem,System.Collections.Generic.IList{Microsoft.AspNetCore.OData.Query.Container.NamedPropertyExpression})">
            <summary>
            Build the navigation property <see cref="T:Microsoft.OData.Edm.IEdmNavigationProperty"/> into the included properties.
            The property name is the navigation property name.
            The property value is the navigation property value from the source and applied the nested query options.
            </summary>
            <param name="source">The source contains the navigation property.</param>
            <param name="structuredType">The structured type or its derived type contains the navigation property.</param>
            <param name="navigationProperty">The expanded navigation property.</param>
            <param name="expandedItem">The expanded navigation select item. It may contain the neste query options.</param>
            <param name="includedProperties">The container to hold the created property.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder.BuildSelectedProperty(System.Linq.Expressions.Expression,Microsoft.OData.Edm.IEdmStructuredType,Microsoft.OData.Edm.IEdmStructuralProperty,Microsoft.OData.UriParser.PathSelectItem,System.Collections.Generic.IList{Microsoft.AspNetCore.OData.Query.Container.NamedPropertyExpression})">
            <summary>
            Build the structural property <see cref="T:Microsoft.OData.Edm.IEdmStructuralProperty"/> into the included properties.
            The property name is the structural property name.
            The property value is the structural property value from the source and applied the nested query options.
            </summary>
            <param name="source">The source contains the structural property.</param>
            <param name="structuredType">The structured type or its derived type contains the structural property.</param>
            <param name="structuralProperty">The selected structural property.</param>
            <param name="pathSelectItem">The selected item. It may contain the neste query options and could be null.</param>
            <param name="includedProperties">The container to hold the created property.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.SelectExpandBinder.BuildDynamicProperty(System.Linq.Expressions.Expression,Microsoft.OData.Edm.IEdmStructuredType,System.Collections.Generic.IList{Microsoft.AspNetCore.OData.Query.Container.NamedPropertyExpression})">
            <summary>
            Build the dynamic properties into the included properties.
            </summary>
            <param name="source">The source contains the dynamic property.</param>
            <param name="structuredType">The structured type contains the dynamic property.</param>
            <param name="includedProperties">The container to hold the created property.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Expressions.TransformationBinderBase.ResultClrType">
            <summary>
            Gets CLR type returned from the query.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.TransformationBinderBase.IsClassicEF(System.Linq.IQueryable)">
            <summary>
            Checks IQueryable provider for need of EF6 oprimization
            </summary>
            <param name="query"></param>
            <returns>True if EF6 optimization are needed.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Expressions.UriFunctionsBinder">
            <summary>
            This class helps to bind uri functions to CLR.
            For creating an Expression and apply it on a Queryable collection, we must get the CLR information,
            i.e MethodInfo of each EdmFunction which is mentioned in the EdmModel.
            If you add a custom uri function in OData.Core via 'CustomUriFunctions' class, you must bind it to it's MethodInfo.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.UriFunctionsBinder.BindUriFunctionName(System.String,System.Reflection.MethodInfo)">
            <summary>
            Bind the given function name to the given MethodInfo.
            The binding helps to create an Expression out of the method.
            You can bind a static method, a static extension method, and an instance method.
            You should be carefull about binding instance methods - the declaring type of the method i.e the instance type, 
            will be considered as the first argument of the function.
            </summary>
            <param name="functionName">The uri function name that appears in the OData request uri.</param>
            <param name="methodInfo">The MethodInfo to bind the given function name.</param>
            <exception cref="T:System.ArgumentNullException">Function name argument is Null or empty</exception>
            <exception cref="T:System.ArgumentNullException">MethodInfo argument is Null</exception>
            <exception cref="T:Microsoft.OData.ODataException">The given FunctionName is already binded to another MethodInfo.</exception>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.UriFunctionsBinder.UnbindUriFunctionName(System.String,System.Reflection.MethodInfo)">
            <summary>
            Unbind the given function name from the given MethodInfo.
            </summary>
            <param name="functionName">The uri function name to unbind.</param>
            <param name="methodInfo">The MethodInfo to unbind from the given function name.</param>
            <exception cref="T:System.ArgumentNullException">Function name argument is Null or empty</exception>
            <exception cref="T:System.ArgumentNullException">MethodInfo argument is Null</exception>
            <returns>'True' if function has unbinded. 'False' otherwise.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.UriFunctionsBinder.GetMethodLiteralSignature(System.String,System.Reflection.MethodInfo)">
            <summary>
            Get a string describing the given method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Expressions.UriFunctionsBinder.GetMethodLiteralSignature(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a string describing the function signature.
            'methodName(argTypeName1,argTypeName2,argTypeName3..)'
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.HandleNullPropagationOption">
            <summary>
            This enum defines how to handle null propagation in queryable support.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.HandleNullPropagationOption.Default">
            <summary>
            Determine how to handle null propagation based on the
            query provider during query composition.  This is the
            default value used in <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/>
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.HandleNullPropagationOption.True">
            <summary>
            Handle null propagation during query composition.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.HandleNullPropagationOption.False">
            <summary>
            Do not handle null propagation during query composition.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.HttpRequestODataQueryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.HttpRequestODataQueryExtensions.GetETag(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            Gets the OData <see cref="T:Microsoft.AspNetCore.OData.Query.ETag"/> from the given request.
            </summary>
            <param name="request">The request.</param>
            <param name="entityTagHeaderValue">The entity tag header value.</param>
            <returns>The parsed <see cref="T:Microsoft.AspNetCore.OData.Query.ETag"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.HttpRequestODataQueryExtensions.GetETag``1(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.ETag`1"/> from the given request.
            </summary>
            <param name="request">The request.</param>
            <param name="entityTagHeaderValue">The entity tag header value.</param>
            <returns>The parsed <see cref="T:Microsoft.AspNetCore.OData.Query.ETag`1"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ICountOptionCollection">
            <summary>
            Represents a collection that has total count.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ICountOptionCollection.TotalCount">
            <summary>
            Gets a value representing the total count of the collection.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ModelContainer">
            <summary>
            EntityFramework does not let you inject non primitive constant values (like IEdmModel) in Select queries. Primitives like strings and guids can be
            injected as they can be translated into a SQL query. This container associates a unique string with each EDM model, so that, given the string the model
            can be retrieved later.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ODataQueryOptions">
            <summary>
            This defines a composite OData query options that can be used to perform query composition.
            Currently this only supports $filter, $orderby, $top, $skip, and $count.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.#ctor(Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQueryOptions"/> class based on the incoming request and some metadata information from
            the <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information.</param>
            <param name="request">The incoming request message.</param>
            <remarks>
            This signature uses types that are AspNetCore-specific.
            While the AspNet version of this class makes the HttpRequest available, AspNetCore
            is unhappy when it sees the HttpRequest during validation so HttpRequest is not part
            of the public Api for ODataQueryOptions.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Request">
            <summary>
            Gets the request message associated with this instance.
            </summary>
            <remarks>This signature uses types that are AspNetCore-specific.</remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Context">
            <summary>
             Gets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Skip">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.SkipQueryOption"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Top">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.TopQueryOption"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Count">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.CountQueryOption"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Validator">
            <summary>
            Gets or sets the query validator.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.IsSystemQueryOption(System.String)">
            <summary>
            Check if the given query option is an OData system query option using $-prefix-required theme.
            </summary>
            <param name="queryOptionName">The name of the query option.</param>
            <returns>Returns <c>true</c> if the query option is an OData system query option.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.IsSystemQueryOption(System.String,System.Boolean)">
            <summary>
            Check if the given query option is an OData system query option.
            </summary>
            <param name="queryOptionName">The name of the query option.</param>
            <param name="isDollarSignOptional">Whether the optional-$-prefix scheme is used for OData system query.</param>
            <returns>Returns <c>true</c> if the query option is an OData system query option.</returns>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.IfMatch">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.ETag"/> from IfMatch header.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.IfNoneMatch">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.ETag"/> from IfNoneMatch header.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.GetETag(Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            Gets the EntityTagHeaderValue ETag.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.IsSupportedQueryOption(System.String)">
            <summary>
            Check if the given query option is the supported query option.
            </summary>
            <param name="queryOptionName">The name of the query option.</param>
            <returns>Returns <c>true</c> if the query option is the supported query option.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable)">
            <summary>
            Apply the individual query to the given IQueryable in the right order.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.AllowedQueryOptions)">
            <summary>
            Apply the individual query to the given IQueryable in the right order.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="ignoreQueryOptions">The query parameters that are already applied in queries.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings,Microsoft.AspNetCore.OData.Query.AllowedQueryOptions)">
            <summary>
            Apply the individual query to the given IQueryable in the right order.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The settings to use in query composition.</param>
            <param name="ignoreQueryOptions">The query parameters that are already applied in queries.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the individual query to the given IQueryable in the right order.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The settings to use in query composition.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.ApplyTo(System.Object,Microsoft.AspNetCore.OData.Query.ODataQuerySettings,Microsoft.AspNetCore.OData.Query.AllowedQueryOptions)">
            <summary>
            Apply the individual query to the given IQueryable in the right order.
            </summary>
            <param name="entity">The original entity.</param>
            <param name="querySettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> that contains all the query application related settings.</param>
            <param name="ignoreQueryOptions">The query parameters that are already applied in queries.</param>
            <returns>The new entity after the $select and $expand query has been applied to.</returns>
            <remarks>Only $select and $expand query options can be applied on single entities. This method throws if the query contains any other
            query options.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.ApplyTo(System.Object,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Applies the query to the given entity using the given <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/>.
            </summary>
            <param name="entity">The original entity.</param>
            <param name="querySettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> that contains all the query application related settings.</param>
            <returns>The new entity after the $select and $expand query has been applied to.</returns>
            <remarks>Only $select and $expand query options can be applied on single entities. This method throws if the query contains any other
            query options.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate all OData queries, including $skip, $top, $orderby and $filter, based on the given <paramref name="validationSettings"/>.
            It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance which contains all the validation settings.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.LimitResults(System.Linq.IQueryable,System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Ensures the given <see cref="!:OrderByQueryOption"/> will produce a stable sort.
            If it will, the input <paramref name="orderBy"/> will be returned
            unmodified.  If the given <see cref="!:OrderByQueryOption"/> will not produce a
            stable sort, a new <see cref="!:OrderByQueryOption"/> instance will be created
            and returned.
            </summary>
            <param name="orderBy">The <see cref="!:OrderByQueryOption"/> to evaluate.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.</param>
            <param name="applySortOptions"></param>
            <returns>An <see cref="!:OrderByQueryOption"/> that will produce a stable sort.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.AddAutoSelectExpandProperties">
            <summary>
            Limits the query results to a maximum number of results.
            </summary>
            <typeparam name="T">The entity CLR type</typeparam>
            <param name="queryable">The queryable to limit.</param>
            <param name="limit">The query result limit.</param>
            <param name="parameterize">Flag indicating whether constants should be parameterized</param>
            <param name="resultsLimited"><c>true</c> if the query results were limited; <c>false</c> otherwise</param>
            <returns>The limited query results.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions.Initialize(Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQueryOptions"/> class based on the incoming request and some metadata information from
            the <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1">
            <summary>
            This defines a composite OData query options that can be used to perform query composition.
            Currently this only supports $filter, $orderby, $top, $skip.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1.#ctor(Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQueryOptions"/> class based on the incoming request and some metadata information from
            the <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="!:IEdmModel"/> and some type information</param>
            <param name="request">The incoming request message</param>
            <remarks>This signature uses types that are AspNetCore-specific.</remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1.IfMatch">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.ETag`1"/> from IfMatch header.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1.IfNoneMatch">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.OData.Query.ETag`1"/> from IfNoneMatch header.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1.GetETag(Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            Gets the EntityTagHeaderValue ETag>.
            </summary>
            <remarks>This signature uses types that are AspNetCore-specific.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1.ApplyTo(System.Linq.IQueryable)">
            <summary>
            Apply the individual query to the given IQueryable in the right order.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryOptions`1.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the individual query to the given IQueryable in the right order.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The settings to use in query composition.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the query has been applied to.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ODataQueryParameterBindingAttribute">
            <summary>
            A <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinderAttribute"/> to bind parameters of type <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQueryOptions"/> to the OData query from the incoming request.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQueryParameterBindingAttribute.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQueryParameterBindingAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings">
            <summary>
            This class describes the settings to use during query composition.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> class
            and initializes the default settings.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.ModelBoundPageSize">
            <summary>
            Gets or sets the maximum number of query results to return based on the type or property.
            </summary>
            <value>
            The maximum number of query results to return based on the type or property,
            or <c>null</c> if there is no limit.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.EnsureStableOrdering">
            <summary>
            Gets or sets a value indicating whether query composition should
            alter the original query when necessary to ensure a stable sort order.
            </summary>
            <value>A <c>true</c> value indicates the original query should
            be modified when necessary to guarantee a stable sort order.
            A <c>false</c> value indicates the sort order can be considered
            stable without modifying the query.  Query providers that ensure
            a stable sort order should set this value to <c>false</c>.
            The default value is <c>true</c>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.HandleNullPropagation">
            <summary>
            Gets or sets a value indicating how null propagation should
            be handled during query composition.
            </summary>
            <value>
            The default is <see cref="F:Microsoft.AspNetCore.OData.Query.HandleNullPropagationOption.Default"/>.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.EnableConstantParameterization">
            <summary>
            Gets or sets a value indicating whether constants should be parameterized. Parameterizing constants
            would result in better performance with Entity framework.
            </summary>
            <value>The default value is <c>true</c>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.EnableCorrelatedSubqueryBuffering">
            <summary>
            Gets or sets a value indicating whether queries with expanded navigations should be formulated
            to encourage correlated subquery results to be buffered.
            Buffering correlated subquery results can reduce the number of queries from N + 1 to 2
            by buffering results from the subquery.
            </summary>
            <value>The default value is <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.PageSize">
            <summary>
            Gets or sets the maximum number of query results to return.
            </summary>
            <value>
            The maximum number of query results to return, or <c>null</c> if there is no limit.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.HandleReferenceNavigationPropertyExpandFilter">
            <summary>
            Honor $filter inside $expand of non-collection navigation property.
            The expanded property is only populated when the filter evaluates to true.
            This setting is false by default.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator">
            <summary>
            This defines a translator to translate parameter alias nodes.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.OData.UriParser.SingleValueNode})">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator"/>.
            </summary>
            <param name="parameterAliasNodes">Parameter alias nodes mapping.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.AllNode)">
            <summary>
            Translate an AllNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.AnyNode)">
            <summary>
            Translate an AnyNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.BinaryOperatorNode)">
            <summary>
            Translate a BinaryOperatorNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.InNode)">
            <summary>
            Translate an InNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionFunctionCallNode)">
            <summary>
            Translate a CollectionFunctionCallNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionNavigationNode)">
            <summary>
            Translate a CollectionNavigationNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionOpenPropertyAccessNode)">
            <summary>
            Translate a CollectionOpenPropertyAccessNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionComplexNode)">
            <summary>
            Translate a CollectionComplexNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionPropertyAccessNode)">
            <summary>
            Translate a CollectionPropertyAccessNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.ConstantNode)">
            <summary>
            Translate a ConstantNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The original node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionConstantNode)">
            <summary>
            Translate a CollectionConstantNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The original node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.ConvertNode)">
            <summary>
            Translate a ConvertNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionResourceCastNode)">
            <summary>
            Translate an CollectionResourceCastNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CollectionResourceFunctionCallNode)">
            <summary>
            Translate an CollectionResourceFunctionCallNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.ResourceRangeVariableReferenceNode)">
            <summary>
            Translate an ResourceRangeVariableReferenceNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The original node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.NamedFunctionParameterNode)">
            <summary>
            Translate a NamedFunctionParameterNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.NonResourceRangeVariableReferenceNode)">
            <summary>
            Translate a NonResourceRangeVariableReferenceNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The original node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.ParameterAliasNode)">
            <summary>
            Translate a ParameterAliasNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SearchTermNode)">
            <summary>
            Translate a SearchTermNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The original node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SingleResourceCastNode)">
            <summary>
            Translate a SingleResourceCastNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SingleResourceFunctionCallNode)">
            <summary>
            Translate a SingleResourceFunctionCallNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SingleNavigationNode)">
            <summary>
            Translate a SingleNavigationNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SingleValueFunctionCallNode)">
            <summary>
            Translate a SingleValueFunctionCallNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SingleValueOpenPropertyAccessNode)">
            <summary>
            Translate a SingleValueOpenPropertyAccessNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SingleValuePropertyAccessNode)">
            <summary>
            Translate a SingleValuePropertyAccessNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.SingleComplexNode)">
            <summary>
            Translate a SingleComplexNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.UnaryOperatorNode)">
            <summary>
            Translate an UnaryOperatorNode.
            </summary>
            <param name="nodeIn">The node to be translated.</param>
            <returns>The translated node.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.ParameterAliasNodeTranslator.Visit(Microsoft.OData.UriParser.CountNode)">
            <summary> 
            Translate a CountNode. 
            </summary> 
            <param name="nodeIn">The node to be translated.</param> 
            <returns>The translated node.</returns> 
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.SRResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ActionContextMustHaveDescriptor">
            <summary>
              Looks up a localized string similar to The HttpActionContext.ActionDescriptor is null..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ActionContextMustHaveRequest">
            <summary>
              Looks up a localized string similar to The HttpActionContext.Request is null..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ActionExecutedContextMustHaveRequest">
            <summary>
              Looks up a localized string similar to The HttpExecutedActionContext.Request is null..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.AggregateKindNotSupported">
            <summary>
              Looks up a localized string similar to {0} type of aggregation is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.AggregationMethodNotSupported">
            <summary>
              Looks up a localized string similar to Aggregation method &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.AggregationNotSupportedForType">
            <summary>
              Looks up a localized string similar to Aggregation &apos;{0}&apos; not supported for property &apos;{1}&apos; of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ApplyToOnUntypedQueryOption">
            <summary>
              Looks up a localized string similar to The query option is not bound to any CLR type. &apos;{0}&apos; is only supported with a query option bound to a CLR type..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.BinaryOperatorNotSupported">
            <summary>
              Looks up a localized string similar to A binary operator with incompatible types was detected. Found operand types &apos;{0}&apos; and &apos;{1}&apos; for operator kind &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.CannotApplyETagOfT">
            <summary>
              Looks up a localized string similar to Cannot apply {0} of &apos;{1}&apos; to {2} of &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.CannotApplyODataQueryOptionsOfT">
            <summary>
              Looks up a localized string similar to Cannot apply {0} of &apos;{1}&apos; to {2} of &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.CannotCastFilter">
            <summary>
              Looks up a localized string similar to Cannot cast $filter of type &apos;{0}&apos; to type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ConvertToEnumFailed">
            <summary>
              Looks up a localized string similar to Cannot compare an enum of type &apos;{0}&apos; to an expression of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ElementClrTypeNull">
            <summary>
              Looks up a localized string similar to The property &apos;ElementClrType&apos; of {0} cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.EntityTypeMismatch">
            <summary>
              Looks up a localized string similar to The entity type &apos;{0}&apos; does not match the expected entity type &apos;{1}&apos; as set on the query context..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ETagNotWellFormed">
            <summary>
              Looks up a localized string similar to The ETag is not well-formed..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ExpandFilterExpressionNotLambdaExpression">
            <summary>
              Looks up a localized string similar to $filter in $expand of reference navigation property &apos;{0}&apos; is not expected type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.FailedToBuildEdmModelBecauseReturnTypeIsNull">
            <summary>
              Looks up a localized string similar to Cannot create an EDM model as the action &apos;{0}&apos; on controller &apos;{1}&apos; has a void return type..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.FailedToRetrieveTypeToBuildEdmModel">
            <summary>
              Looks up a localized string similar to Cannot create an EDM model as the action &apos;{0}&apos; on controller &apos;{1}&apos; has a return type &apos;{2}&apos; that does not implement IEnumerable&lt;T&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.FunctionNotSupportedOnEnum">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; function cannot be applied to an enumeration-typed argument..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.InvalidExpansionDepthValue">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; should be less than or equal to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.InvalidPropertyMapper">
            <summary>
              Looks up a localized string similar to The mapper provider must return a valid &apos;{0}&apos; instance for the given &apos;{1}&apos; IEdmType..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.InvalidPropertyMapping">
            <summary>
              Looks up a localized string similar to The key mapping for the property &apos;{0}&apos; can&apos;t be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.MappingDoesNotContainResourceType">
            <summary>
              Looks up a localized string similar to The provided mapping does not contain a resource for the resource type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.MaxExpandDepthExceeded">
            <summary>
              Looks up a localized string similar to The request includes a $expand path which is too deep. The maximum depth allowed is {0}. To increase the limit, set the &apos;{1}&apos; property on EnableQueryAttribute or ODataValidationSettings, or set the &apos;MaxDepth&apos; property in ExpandAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.MaxNodeLimitExceeded">
            <summary>
              Looks up a localized string similar to The node count limit of &apos;{0}&apos; has been exceeded. To increase the limit, set the &apos;{1}&apos; property on EnableQueryAttribute or ODataValidationSettings..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotAllowedArithmeticOperator">
            <summary>
              Looks up a localized string similar to Arithmetic operator &apos;{0}&apos; is not allowed. To allow it, set the &apos;{1}&apos; property on EnableQueryAttribute or QueryValidationSettings..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotAllowedFunction">
            <summary>
              Looks up a localized string similar to Function &apos;{0}&apos; is not allowed. To allow it, set the &apos;{1}&apos; property on EnableQueryAttribute or QueryValidationSettings..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotAllowedLogicalOperator">
            <summary>
              Looks up a localized string similar to Logical operator &apos;{0}&apos; is not allowed. To allow it, set the &apos;{1}&apos; property on EnableQueryAttribute or QueryValidationSettings..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotAllowedOrderByProperty">
            <summary>
              Looks up a localized string similar to Order by &apos;{0}&apos; is not allowed. To allow it, set the &apos;{1}&apos; property on EnableQueryAttribute or QueryValidationSettings..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotAllowedQueryOption">
            <summary>
              Looks up a localized string similar to Query option &apos;{0}&apos; is not allowed. To allow it, set the &apos;{1}&apos; property on EnableQueryAttribute or QueryValidationSettings..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotCountableEntitySetUsedForCount">
            <summary>
              Looks up a localized string similar to The entity set &apos;{0}&apos; cannot be used for $count..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotCountablePropertyUsedForCount">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; cannot be used for $count..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotExpandablePropertyUsedInExpand">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; cannot be used in the $expand query option..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotFilterablePropertyUsedInFilter">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; cannot be used in the $filter query option..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotNavigablePropertyUsedInNavigation">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; cannot be used for navigation..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotSelectablePropertyUsedInSelect">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; cannot be used in the $select query option..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotSortablePropertyUsedInOrderBy">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; cannot be used in the $orderby query option..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.NotSupportedTransformationKind">
            <summary>
              Looks up a localized string similar to Transformation kind {0} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ODataFunctionNotSupported">
            <summary>
              Looks up a localized string similar to Unknown function &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.OrderByClauseNotSupported">
            <summary>
              Looks up a localized string similar to Only ordering by properties is supported for non-primitive collections. Expressions are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.OrderByDuplicateIt">
            <summary>
              Looks up a localized string similar to Multiple &apos;$it&apos; nodes are not supported in &apos;$orderby&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.OrderByDuplicateProperty">
            <summary>
              Looks up a localized string similar to Duplicate property named &apos;{0}&apos; is not supported in &apos;$orderby&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.OrderByNodeCountExceeded">
            <summary>
              Looks up a localized string similar to The number of clauses in $orderby query option exceeded the maximum number allowed. The maximum number of $orderby clauses allowed is {0}..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.PropertyOrPathWasRemovedFromContext">
            <summary>
              Looks up a localized string similar to Property or path {0} isn&apos;t available in the current context. It was removed in earlier transformation..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.QueryCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The value for OData query &apos;{0}&apos; cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.QueryNodeBindingNotSupported">
            <summary>
              Looks up a localized string similar to Binding OData QueryNode of kind {0} is not supported by {1}..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.QueryNodeValidationNotSupported">
            <summary>
              Looks up a localized string similar to Validating OData QueryNode of kind {0} is not supported by {1}..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.QueryParameterNotSupported">
            <summary>
              Looks up a localized string similar to The query parameter &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.ReferenceNavigationPropertyExpandFilterVisitorUnexpectedParameter">
            <summary>
              Looks up a localized string similar to Found unexpected parameter &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.SelectExpandEmptyOrNull">
            <summary>
              Looks up a localized string similar to &apos;select&apos; and &apos;expand&apos; cannot be both null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.SelectNonStructured">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a structured type. Only structured types support $select and $expand..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.SkipTopLimitExceeded">
            <summary>
              Looks up a localized string similar to The limit of &apos;{0}&apos; for {1} query has been exceeded. The value from the incoming request is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.UriFunctionClrBinderAlreadyBound">
            <summary>
              Looks up a localized string similar to The function &apos;{0}&apos; is already bound to another method..
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SRResources.UriQueryStringInvalid">
            <summary>
              Looks up a localized string similar to The query specified in the URI is not valid. {0}.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.CountQueryOption">
            <summary>
            Represents the value of the $count query option and exposes a way to retrieve the number of entities that satisfy a query.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.CountQueryOption.#ctor(System.String,Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.OData.UriParser.ODataQueryOptionParser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.CountQueryOption" /> class.
            </summary>
            <param name="rawValue">The raw value for the $count query option.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the query context.</param>
            <param name="queryOptionParser">The <see cref="T:Microsoft.OData.UriParser.ODataQueryOptionParser"/> which is used to parse the query option.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.CountQueryOption.Context">
            <summary>
            Gets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.CountQueryOption.RawValue">
            <summary>
            Gets the raw $count value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.CountQueryOption.Value">
            <summary>
            Gets the value of the $count in a parsed form.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.CountQueryOption.Validator">
            <summary>
            Gets or sets the $count query validator.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.CountQueryOption.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate the count query based on the given <paramref name="validationSettings"/>.
            It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance
            which contains all the validation settings.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.CountQueryOption.GetEntityCount(System.Linq.IQueryable)">
            <summary>
            Gets the number of entities that satisfy the given query if the response should include a count query option, or <c>null</c> otherwise.
            </summary>
            <param name="query">The query to compute the count for.</param>
            <returns>The number of entities that satisfy the specified query if the response should include a count query option, or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.CountQueryOption.GetEntityCountFunc(System.Linq.IQueryable)">
            <summary>
            Gets the Func of entities number that satisfy the given query if the response should include a count query option, or <c>null</c> otherwise.
            </summary>
            <param name="query">The query to compute the count for.</param>
            <returns>The the Func of entities number that satisfy the specified query if the response should include a count query option, or <c>null</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption">
            <summary>
            This defines a $filter OData query option for querying.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.#ctor(System.String,Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.OData.UriParser.ODataQueryOptionParser)">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> based on the raw $filter value and
            an EdmModel from <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="rawValue">The raw value for $filter query. It can be null or empty.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information</param>
            <param name="queryOptionParser">The <see cref="T:Microsoft.OData.UriParser.ODataQueryOptionParser"/> which is used to parse the query option.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.Context">
            <summary>
             Gets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.Validator">
            <summary>
            Gets or sets the Filter Query Validator
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.FilterClause">
            <summary>
            Gets the parsed <see cref="P:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.FilterClause"/> for this query option.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.RawValue">
            <summary>
             Gets the raw $filter value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the filter query to the given IQueryable.
            </summary>
            <remarks>
            The <see cref="P:Microsoft.AspNetCore.OData.Query.ODataQuerySettings.HandleNullPropagation"/> property specifies
            how this method should handle null propagation.
            </remarks>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> that contains all the query application related settings.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the filter query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate the filter query based on the given <paramref name="validationSettings"/>. It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance which contains all the validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.OrderByCountNode">
            <summary>
            Represents an order by <see cref="T:Microsoft.OData.Edm.IEdmProperty"/> expression.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByCountNode.#ctor(Microsoft.OData.UriParser.OrderByClause)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByCountNode"/> class.
            </summary>
            <param name="orderByClause">The orderby clause representing property access.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByCountNode.OrderByClause">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.OData.Query.Query.OrderByCountNode.OrderByClause"/> of this node.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.OrderByItNode">
            <summary>
            Represents the order by expression '$it' in the $orderby clause.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByItNode.#ctor(Microsoft.OData.UriParser.OrderByDirection)">
            <summary>
            Instantiates a new instance of <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByItNode"/> class.
            </summary>
            <param name="direction">The <see cref="T:Microsoft.OData.UriParser.OrderByDirection"/> for this node.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.OrderByNode">
            <summary>
            Represents a single order by expression in the $orderby clause.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByNode.#ctor(Microsoft.OData.UriParser.OrderByDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByNode"/> class.
            </summary>
            <param name="direction">The direction of the sort order.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByNode.#ctor(Microsoft.OData.UriParser.OrderByClause)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByNode"/> class.
            </summary>
            <param name="orderByClause">The clause of the sort order.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByNode.Direction">
            <summary>
            Gets the <see cref="T:Microsoft.OData.UriParser.OrderByDirection"/> for the current node.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByNode.CreateCollection(Microsoft.OData.UriParser.OrderByClause)">
            <summary>
            Creates a list of <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByNode"/> instances from a linked list of <see cref="T:Microsoft.OData.UriParser.OrderByClause"/> instances.
            </summary>
            <param name="orderByClause">The head of the <see cref="T:Microsoft.OData.UriParser.OrderByClause"/> linked list.</param>
            <returns>The list of new <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode"/> instances.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.OrderByOpenPropertyNode">
            <summary>
            Represents ordering on a dynamic property
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByOpenPropertyNode.#ctor(Microsoft.OData.UriParser.OrderByClause)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByOpenPropertyNode"/> class.
            </summary>
            <param name="orderByClause">The order by clause for this open property.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByOpenPropertyNode.OrderByClause">
            <summary>
            The order by clause
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByOpenPropertyNode.PropertyName">
            <summary>
            The name of the dynamic property
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode">
            <summary>
            Represents an order by <see cref="T:Microsoft.OData.Edm.IEdmProperty"/> expression.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode.#ctor(Microsoft.OData.UriParser.OrderByClause)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode"/> class.
            </summary>
            <param name="orderByClause">The orderby clause representing property access.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode.#ctor(Microsoft.OData.Edm.IEdmProperty,Microsoft.OData.UriParser.OrderByDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode"/> class.
            </summary>
            <param name="property">The <see cref="T:Microsoft.OData.Edm.IEdmProperty"/> for this node.</param>
            <param name="direction">The <see cref="T:Microsoft.OData.UriParser.OrderByDirection"/> for this node.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode.OrderByClause">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode.OrderByClause"/> of this node.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode.Property">
            <summary>
            Gets the <see cref="T:Microsoft.OData.Edm.IEdmProperty"/> for the current node.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption">
            <summary>
            This defines a $orderby OData query option for querying.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.#ctor(System.String,Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.OData.UriParser.ODataQueryOptionParser)">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption"/> based on the raw $orderby value and
            an EdmModel from <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="rawValue">The raw value for $orderby query. It can be null or empty.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information</param>
            <param name="queryOptionParser">The <see cref="T:Microsoft.OData.UriParser.ODataQueryOptionParser"/> which is used to parse the query option.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.Context">
            <summary>
             Gets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.OrderByNodes">
            <summary>
            Gets the mutable list of <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByPropertyNode"/> instances for this query option.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.RawValue">
            <summary>
             Gets the raw $orderby value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.Validator">
            <summary>
            Gets or sets the OrderBy Query Validator.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.OrderByClause">
            <summary>
            Gets the parsed <see cref="P:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.OrderByClause"/> for this query option.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.ApplyTo``1(System.Linq.IQueryable{``0})">
            <summary>
            Apply the $orderby query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the orderby query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the $orderby query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> that contains all the query application related settings.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the orderby query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.ApplyTo(System.Linq.IQueryable)">
            <summary>
            Apply the $orderby query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the orderby query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the $orderby query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> that contains all the query application related settings.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the orderby query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate the orderby query based on the given <paramref name="validationSettings"/>. It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance which contains all the validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption">
            <summary>
            Represents the OData $select and $expand query options.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.#ctor(System.String,System.String,Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.OData.UriParser.ODataQueryOptionParser)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption"/> class.
            </summary>
            <param name="select">The $select query parameter value.</param>
            <param name="expand">The $expand query parameter value.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information.</param>
            <param name="queryOptionParser">The <see cref="T:Microsoft.OData.UriParser.ODataQueryOptionParser"/> which is used to parse the query option.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.Context">
            <summary>
             Gets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.RawSelect">
            <summary>
            Gets the raw $select value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.RawExpand">
            <summary>
            Gets the raw $expand value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.Validator">
            <summary>
            Gets or sets the $select and $expand query validator.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.SelectExpandClause">
            <summary>
            Gets the parsed <see cref="P:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.SelectExpandClause"/> for this query option.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.LevelsMaxLiteralExpansionDepth">
            <summary>
            Gets or sets the number of levels that a top level $expand=NavigationProperty($levels=max)
            will be expanded.
            This value will decrease by one with each nesting level in the $expand clause.
            For example, with a property value 5, the following query $expand=A($expand=B($expand=C($levels=max)))
            will be interpreted as $expand=A($expand=B($expand=C($levels=3))).
            If the query gets validated, the <see cref="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.MaxExpansionDepth"/> value
            must be greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Applies the $select and $expand query options to the given <see cref="T:System.Linq.IQueryable"/> using the given
            <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/>.
            </summary>
            <param name="queryable">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="settings">The <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> that contains all the query application related settings.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the filter query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.ApplyTo(System.Object,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Applies the $select and $expand query options to the given entity using the given <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/>.
            </summary>
            <param name="entity">The original entity.</param>
            <param name="settings">The <see cref="T:Microsoft.AspNetCore.OData.Query.ODataQuerySettings"/> that contains all the query application related settings.</param>
            <returns>The new entity after the $select and $expand query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate the $select and $expand query based on the given <paramref name="validationSettings"/>. It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance which contains all the validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.SkipTokenHandler">
            <summary>
            Represents how NextLink for paging is generated.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SkipTokenHandler.ApplyTo``1(System.Linq.IQueryable{``0},Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption)">
            <summary>
            Apply the $skiptoken query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="skipTokenQueryOption">The query option that contains all the relevant information for applying skiptoken.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the skiptoken query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SkipTokenHandler.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption)">
            <summary>
            Apply the $skiptoken query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="skipTokenQueryOption">The query option that contains all the relevant information for applying skiptoken.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the skiptoken query has been applied to.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption">
            <summary>
            This defines a $skiptoken OData query option for querying.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.skipTokenHandler">
            <summary>
            Generates the nextlink value and consumes the skiptoken value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.#ctor(System.String,Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.OData.UriParser.ODataQueryOptionParser)">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.AspNetCore.OData.Query.SkipQueryOption"/> based on the raw $skiptoken value and
            an EdmModel from <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="rawValue">The raw value for $skiptoken query.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information</param>
            <param name="queryOptionParser">The <see cref="T:Microsoft.OData.UriParser.ODataQueryOptionParser"/> which is used to parse the query option.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.RawValue">
            <summary>
            Gets the raw $skiptoken value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.Context">
            <summary>
            Gets and sets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.Validator">
            <summary>
            Gets or sets the SkipToken Query Validator.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.QuerySettings">
            <summary>
            Gets or sets the query setting 
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.QueryOptions">
            <summary>
            Gets or sets the QueryOptions
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},Microsoft.AspNetCore.OData.Query.ODataQuerySettings,Microsoft.AspNetCore.OData.Query.ODataQueryOptions)">
            <summary>
            Apply the $skiptoken query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The query settings to use while applying this query option.</param>
            <param name="queryOptions">Information about the other query options.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the skiptoken query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings,Microsoft.AspNetCore.OData.Query.ODataQueryOptions)">
            <summary>
            Apply the $skiptoken query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The query settings to use while applying this query option.</param>
            <param name="queryOptions">Information about the other query options.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the skiptoken query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate the skiptoken query based on the given <paramref name="validationSettings"/>. It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance which contains all the validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.SkipQueryOption">
            <summary>
            This defines a $skip OData query option for querying.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.SkipQueryOption.#ctor(System.String,Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.OData.UriParser.ODataQueryOptionParser)">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.AspNetCore.OData.Query.SkipQueryOption"/> based on the raw $skip value and
            an EdmModel from <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="rawValue">The raw value for $skip query. It can be null or empty.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information</param>
            <param name="queryOptionParser">The <see cref="T:Microsoft.OData.UriParser.ODataQueryOptionParser"/> which is used to parse the query option.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SkipQueryOption.Context">
            <summary>
            Gets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SkipQueryOption.RawValue">
            <summary>
            Gets the raw $skip value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SkipQueryOption.Value">
            <summary>
            Gets the value of the $skip as a parsed integer.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.SkipQueryOption.Validator">
            <summary>
            Gets or sets the Skip Query Validator.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.SkipQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the $skip query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The query settings to use while applying this query option.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the skip query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.SkipQueryOption.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the $skip query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The query settings to use while applying this query option.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the skip query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.SkipQueryOption.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate the skip query based on the given <paramref name="validationSettings"/>. It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance which contains all the validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.TopQueryOption">
            <summary>
            This defines a $top OData query option for querying.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.TopQueryOption.#ctor(System.String,Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext,Microsoft.OData.UriParser.ODataQueryOptionParser)">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.AspNetCore.OData.Query.TopQueryOption"/> based on the raw $top value and 
            an EdmModel from <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
            <param name="rawValue">The raw value for $top query. It can be null or empty.</param>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/> which contains the <see cref="T:Microsoft.OData.Edm.IEdmModel"/> and some type information</param>
            <param name="queryOptionParser">The <see cref="T:Microsoft.OData.UriParser.ODataQueryOptionParser"/> which is used to parse the query option.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.TopQueryOption.Context">
            <summary>
            Gets the given <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.ODataQueryContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.TopQueryOption.RawValue">
            <summary>
            Gets the raw $top value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.TopQueryOption.Value">
            <summary>
            Gets the value of the $top as a parsed integer.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.TopQueryOption.Validator">
            <summary>
            Gets or sets the Top Query Validator.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.TopQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the $top query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The query settings to use while applying this query option.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the top query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.TopQueryOption.ApplyTo(System.Linq.IQueryable,Microsoft.AspNetCore.OData.Query.ODataQuerySettings)">
            <summary>
            Apply the $top query to the given IQueryable.
            </summary>
            <param name="query">The original <see cref="T:System.Linq.IQueryable"/>.</param>
            <param name="querySettings">The query settings to use while applying this query option.</param>
            <returns>The new <see cref="T:System.Linq.IQueryable"/> after the top query has been applied to.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.TopQueryOption.Validate(Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validate the top query based on the given <paramref name="validationSettings"/>. It throws an ODataException if validation failed.
            </summary>
            <param name="validationSettings">The <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/> instance which contains all the validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.CountQueryValidator">
            <summary>
            Represents a validator used to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.CountQueryOption"/> 
            based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.CountQueryValidator.#ctor(Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.CountQueryValidator" /> class based on
            the <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.
            </summary>
            <param name="defaultQuerySettings">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.CountQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.CountQueryOption,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates a <see cref="T:Microsoft.AspNetCore.OData.Query.CountQueryOption" />.
            </summary>
            <param name="countQueryOption">The $count query.</param>
            <param name="validationSettings">The validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator">
            <summary>
            Represents a validator used to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption" /> based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
            <remarks>
            Please note this class is not thread safe.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.#ctor(Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator" /> class based on
            the <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.
            </summary>
            <param name="defaultQuerySettings">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption" />.
            </summary>
            <param name="filterQueryOption">The $filter query.</param>
            <param name="settings">The validation settings.</param>
            <remarks>
            Please note this method is not thread safe.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.Validate(Microsoft.OData.UriParser.FilterClause,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings,Microsoft.OData.Edm.IEdmModel)">
            <summary>
            Validates a <see cref="T:Microsoft.OData.UriParser.FilterClause" />.
            </summary>
            <param name="filterClause">The <see cref="T:Microsoft.OData.UriParser.FilterClause" />.</param>
            <param name="settings">The validation settings.</param>
            <param name="model">The EdmModel.</param>
            <remarks>
            Please note this method is not thread safe.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateAllNode(Microsoft.OData.UriParser.AllNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to restrict the 'all' query inside the filter query.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="allNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateAnyNode(Microsoft.OData.UriParser.AnyNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to restrict the 'any' query inside the filter query.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="anyNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateBinaryOperatorNode(Microsoft.OData.UriParser.BinaryOperatorNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            override this method to restrict the binary operators inside the filter query. That includes all the logical operators except 'not' and all math operators.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="binaryOperatorNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateLogicalOperator(Microsoft.OData.UriParser.BinaryOperatorNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate the LogicalOperators such as 'eq', 'ne', 'gt', 'ge', 'lt', 'le', 'and', 'or'.
            
            Please note that 'not' is not included here. Please override ValidateUnaryOperatorNode to customize 'not'.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="binaryNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateArithmeticOperator(Microsoft.OData.UriParser.BinaryOperatorNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method for the Arithmetic operators, including add, sub, mul, div, mod.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="binaryNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateConstantNode(Microsoft.OData.UriParser.ConstantNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to restrict the 'constant' inside the filter query.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="constantNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateConvertNode(Microsoft.OData.UriParser.ConvertNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to restrict the 'cast' inside the filter query.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="convertNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateNavigationPropertyNode(Microsoft.OData.UriParser.QueryNode,Microsoft.OData.Edm.IEdmNavigationProperty,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method for the navigation property node.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="sourceNode"></param>
            <param name="navigationProperty"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateRangeVariable(Microsoft.OData.UriParser.RangeVariable,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate the parameter used in the filter query.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="rangeVariable"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateSingleValuePropertyAccessNode(Microsoft.OData.UriParser.SingleValuePropertyAccessNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate property accessor.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="propertyAccessNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateSingleComplexNode(Microsoft.OData.UriParser.SingleComplexNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate single complex property accessor.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="singleComplexNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateCollectionPropertyAccessNode(Microsoft.OData.UriParser.CollectionPropertyAccessNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate collection property accessor.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="propertyAccessNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateCollectionComplexNode(Microsoft.OData.UriParser.CollectionComplexNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate collection complex property accessor.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="collectionComplexNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateSingleValueFunctionCallNode(Microsoft.OData.UriParser.SingleValueFunctionCallNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate Function calls, such as 'length', 'year', etc.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="node"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateSingleResourceFunctionCallNode(Microsoft.OData.UriParser.SingleResourceFunctionCallNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate single resource function calls, such as 'cast'.
            </summary>
            <param name="node">The node to validate.</param>
            <param name="settings">The settings to use while validating.</param>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit
            testing scenarios and is not intended to be called from user code. Call the Validate method to validate a
            <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption" /> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateUnaryOperatorNode(Microsoft.OData.UriParser.UnaryOperatorNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method to validate the Not operator.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="unaryOperatorNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateQueryNode(Microsoft.OData.UriParser.QueryNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method if you want to visit each query node. 
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="node"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateCollectionResourceCastNode(Microsoft.OData.UriParser.CollectionResourceCastNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method if you want to validate casts on resource collections.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="collectionResourceCastNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateSingleResourceCastNode(Microsoft.OData.UriParser.SingleResourceCastNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Override this method if you want to validate casts on single resource.
            </summary>
            <remarks>
            This method is intended to be called from method overrides in subclasses. This method also supports unit-testing scenarios and is not intended to be called from user code.
            Call the Validate method to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.FilterQueryOption"/> instance.
            </remarks>
            <param name="singleResourceCastNode"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.FilterQueryValidator.ValidateSingleValueNode(Microsoft.OData.UriParser.SingleValueNode,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            The recursive method that validate most of the query node type is of SingleValueNode type.
            </summary>
            <param name="node"></param>
            <param name="settings"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.ODataQueryValidator">
            <summary>
            Represents a validator used to validate OData queries based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.ODataQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.ODataQueryOptions,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates the OData query.
            </summary>
            <param name="options">The OData query to validate.</param>
            <param name="validationSettings">The validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings">
            <summary>
            This class describes the validation settings for querying.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.AllowedArithmeticOperators">
            <summary>
            Gets or sets a list of allowed arithmetic operators including 'add', 'sub', 'mul', 'div', 'mod'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.AllowedFunctions">
             <summary>
             Gets or sets a list of allowed functions used in the $filter query.
            
             The allowed functions include the following:
            
             String related: contains, endswith, startswith, length, indexof, substring, tolower, toupper, trim, concat
            
             e.g. ~/Customers?$filter=length(CompanyName) eq 19
            
             Date and Time related: year, month, day, hour, minute, second, fractionalseconds, date, time
            
             e.g. ~/Employees?$filter=year(BirthDate) eq 1971
            
             Math related: round, floor, ceiling
            
             Type related:isof, cast,
            
             Collection related: any, all
            
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.AllowedLogicalOperators">
            <summary>
            Gets or sets a list of allowed logical operators such as 'eq', 'ne', 'gt', 'ge', 'lt', 'le', 'and', 'or', 'not'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.AllowedOrderByProperties">
             <summary>
             Gets a list of properties one can orderby the result with. Note, by default this list is empty,
             it means it can be ordered by any property.
            
             For example, having an empty collection means client can order the queryable result by any properties.
             Adding "Name" to this list means that it only allows queryable result to be ordered by Name property.
             </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.AllowedQueryOptions">
            <summary>
            Gets or sets the query parameters that are allowed inside query. The default is all query options,
            including $filter, $skip, $top, $orderby, $expand, $select, $count, $format, $skiptoken and $deltatoken.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.MaxOrderByNodeCount">
            <summary>
            Gets or sets the maximum number of expressions that can be present in the $orderby.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.MaxAnyAllExpressionDepth">
            <summary>
            Gets or sets the maximum depth of the Any or All elements nested inside the query.
            </summary>
            <remarks>
            The default value is 1.
            </remarks>
            <value>
            The maximum depth of the Any or All elements nested inside the query.
            </value>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.MaxNodeCount">
            <summary>
            Gets or sets the maximum number of the nodes inside the $filter syntax tree.
            </summary>
            <remarks>
            The default value is 100.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.MaxSkip">
            <summary>
            Gets or sets the max value of $skip that a client can request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.MaxTop">
            <summary>
            Gets or sets the max value of $top that a client can request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings.MaxExpansionDepth">
            <summary>
            Gets or sets the max expansion depth for the $expand query option.
            </summary>
            <remarks>To disable the maximum expansion depth check, set this property to 0.</remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.OrderByQueryValidator">
            <summary>
            Represents a validator used to validate an <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption"/> based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.OrderByQueryValidator.#ctor(Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.OrderByQueryValidator" /> class based on
            the <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.
            </summary>
            <param name="defaultQuerySettings">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.OrderByQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates an <see cref="T:Microsoft.AspNetCore.OData.Query.Query.OrderByQueryOption" />.
            </summary>
            <param name="orderByOption">The $orderby query.</param>
            <param name="validationSettings">The validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.SelectExpandQueryValidator">
            <summary>
            Represents a validator used to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption" /> based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.SelectExpandQueryValidator.#ctor(Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.SelectExpandQueryValidator" /> class based on
            the <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.
            </summary>
            <param name="defaultQuerySettings">The <see cref="T:Microsoft.AspNetCore.OData.Abstracts.Query.DefaultQuerySettings" />.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.SelectExpandQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.Query.SelectExpandQueryOption,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates a <see cref="T:Microsoft.AspNetCore.OData.Query.TopQueryOption" />.
            </summary>
            <param name="selectExpandQueryOption">The $select and $expand query.</param>
            <param name="validationSettings">The validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.SkipQueryValidator">
            <summary>
            Represents a validator used to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.SkipQueryOption"/> based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.SkipQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.SkipQueryOption,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates a <see cref="T:Microsoft.AspNetCore.OData.Query.SkipQueryOption" />.
            </summary>
            <param name="skipQueryOption">The $skip query.</param>
            <param name="validationSettings">The validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.SkipTokenQueryValidator">
            <summary>
            Represents a validator used to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption"/> based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.SkipTokenQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates a <see cref="T:Microsoft.AspNetCore.OData.Query.Query.SkipTokenQueryOption" />.
            </summary>
            <param name="skipToken">The $skiptoken query.</param>
            <param name="validationSettings">The validation settings.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Validator.TopQueryValidator">
            <summary>
            Represents a validator used to validate a <see cref="T:Microsoft.AspNetCore.OData.Query.TopQueryOption"/> based on the <see cref="T:Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Validator.TopQueryValidator.Validate(Microsoft.AspNetCore.OData.Query.TopQueryOption,Microsoft.AspNetCore.OData.Query.Validator.ODataValidationSettings)">
            <summary>
            Validates a <see cref="T:Microsoft.AspNetCore.OData.Query.TopQueryOption" />.
            </summary>
            <param name="topQueryOption">The $top query.</param>
            <param name="validationSettings">The validation settings.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.ComputeWrapper`1.ModelID">
            <summary>
            An ID to uniquely identify the model in the <see cref="T:Microsoft.AspNetCore.OData.Query.ModelContainer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Wrapper.DynamicTypeWrapper">
            <summary>
            Represents a container class that contains properties that are grouped by using $apply.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.DynamicTypeWrapper.Values">
            <summary>
            Gets values stored in the wrapper
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Wrapper.DynamicTypeWrapper.TryGetPropertyValue(System.String,System.Object@)">
            <summary>
            Attempts to get the value of the Property called <paramref name="propertyName"/> from the underlying Entity.
            </summary>
            <param name="propertyName">The name of the Property</param>
            <param name="value">The new value of the Property</param>
            <returns>True if successful</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Wrapper.DynamicTypeWrapperConverter">
            <summary>
            Represents a custom <see cref="T:System.Text.Json.Serialization.JsonConverter"/> to serialize <see cref="T:Microsoft.AspNetCore.OData.Query.Wrapper.DynamicTypeWrapper"/> instances to JSON.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.GroupByWrapper.GroupByContainer">
            <summary>
            Gets or sets the property container that contains the properties being expanded. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.GroupByWrapper.Container">
            <summary>
            Gets or sets the property container that contains the properties being expanded. 
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Wrapper.GroupByWrapper.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Wrapper.GroupByWrapper.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper.Container">
            <summary>
            Gets or sets the property container that contains the properties being expanded. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper.ModelID">
            <summary>
            An ID to uniquely identify the model in the <see cref="T:Microsoft.AspNetCore.OData.Query.ModelContainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper.UntypedInstance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper.InstanceType">
            <summary>
            Gets or sets the instance type name
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper.UseInstanceForProperties">
            <summary>
            Indicates whether the underlying instance can be used to obtain property values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper.GetEdmType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper.TryGetPropertyValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapperConverter">
            <summary>
            Represents a custom <see cref="T:System.Text.Json.Serialization.JsonConverter"/> to serialize <see cref="T:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper`1"/> instances to JSON.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper`1">
            <summary>
            Represents a container class that contains properties that are either selected or expanded using $select and $expand.
            </summary>
            <typeparam name="TElement">The element being selected and expanded.</typeparam>
        </member>
        <member name="P:Microsoft.AspNetCore.OData.Query.Wrapper.SelectExpandWrapper`1.Instance">
            <summary>
            Gets or sets the instance of the element being selected and expanded.
            </summary>
        </member>
    </members>
</doc>
