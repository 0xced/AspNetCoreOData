<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
        Microsoft ResX Schema

        Version 1.3

        The primary goals of this format is to allow a simple XML format 
        that is mostly human readable. The generation and parsing of the 
        various data types are done through the TypeConverter classes 
        associated with the data types.

        Example:
    
        ... ado.net/XML headers & schema ...
        <resheader name="resmimetype">text/microsoft-resx</resheader>
        <resheader name="version">1.3</resheader>
        <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
        <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
        <data name="Name1">this is my long string</data>
        <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
        <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
            [base64 mime encoded serialized .NET Framework object]
        </data>
        <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
            [base64 mime encoded string representing a byte array form of the .NET Framework object]
        </data>

        There are any number of "resheader" rows that contain simple 
        name/value pairs.

        Each data row contains a name, and value. The row also contains a 
        type or mimetype. Type corresponds to a .NET class that support 
        text/value conversion through the TypeConverter architecture. 
        Classes that don't support this are serialized and stored with the 
        mimetype set.

        The mimetype is used for serialized objects, and tells the 
        ResXResourceReader how to depersist the object. This is currently not 
        extensible. For a given mimetype the value must be set accordingly:

        Note - application/x-microsoft.net.object.binary.base64 is the format 
        that the ResXResourceWriter will generate, however the reader can 
        read any of the formats listed below.

        mimetype: application/x-microsoft.net.object.binary.base64
        value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

        mimetype: application/x-microsoft.net.object.soap.base64
        value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

        mimetype: application/x-microsoft.net.object.bytearray.base64
        value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
  <data name="ApplyToOnUntypedQueryOption" xml:space="preserve">
    <value>The query option is not bound to any CLR type. '{0}' is only supported with a query option bound to a CLR type.</value>
  </data>
  <data name="SkipTopLimitExceeded" xml:space="preserve">
    <value>The limit of '{0}' for {1} query has been exceeded. The value from the incoming request is '{2}'.</value>
  </data>
  <data name="ActionExecutedContextMustHaveRequest" xml:space="preserve">
    <value>The HttpExecutedActionContext.Request is null.</value>
  </data>
  <data name="ActionContextMustHaveDescriptor" xml:space="preserve">
    <value>The HttpActionContext.ActionDescriptor is null.</value>
  </data>
  <data name="UriQueryStringInvalid" xml:space="preserve">
    <value>The query specified in the URI is not valid. {0}</value>
  </data>
  <data name="QueryParameterNotSupported" xml:space="preserve">
    <value>The query parameter '{0}' is not supported.</value>
  </data>
  <data name="ETagNotWellFormed" xml:space="preserve">
    <value>The ETag is not well-formed.</value>
  </data>
  <data name="CannotApplyETagOfT" xml:space="preserve">
    <value>Cannot apply {0} of '{1}' to {2} of '{3}'.</value>
  </data>
  <data name="ElementClrTypeNull" xml:space="preserve">
    <value>The property 'ElementClrType' of {0} cannot be null.</value>
  </data>
  <data name="EntityTypeMismatch" xml:space="preserve">
    <value>The entity type '{0}' does not match the expected entity type '{1}' as set on the query context.</value>
  </data>
  <data name="CannotApplyODataQueryOptionsOfT" xml:space="preserve">
    <value>Cannot apply {0} of '{1}' to {2} of '{3}'.</value>
  </data>
  <data name="NotAllowedQueryOption" xml:space="preserve">
    <value>Query option '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.</value>
  </data>
  <data name="QueryCannotBeEmpty" xml:space="preserve">
    <value>The value for OData query '{0}' cannot be empty.</value>
  </data>
  <data name="FailedToBuildEdmModelBecauseReturnTypeIsNull" xml:space="preserve">
    <value>Cannot create an EDM model as the action '{0}' on controller '{1}' has a void return type.</value>
  </data>
  <data name="FailedToRetrieveTypeToBuildEdmModel" xml:space="preserve">
    <value>Cannot create an EDM model as the action '{0}' on controller '{1}' has a return type '{2}' that does not implement IEnumerable&lt;T&gt;.</value>
  </data>
  <data name="ActionContextMustHaveRequest" xml:space="preserve">
    <value>The HttpActionContext.Request is null.</value>
  </data>
  <data name="NotAllowedLogicalOperator" xml:space="preserve">
    <value>Logical operator '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.</value>
  </data>
  <data name="NotAllowedOrderByProperty" xml:space="preserve">
    <value>Order by '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.</value>
  </data>
  <data name="NotAllowedArithmeticOperator" xml:space="preserve">
    <value>Arithmetic operator '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.</value>
  </data>
  <data name="NotFilterablePropertyUsedInFilter" xml:space="preserve">
    <value>The property '{0}' cannot be used in the $filter query option.</value>
  </data>
  <data name="NotSortablePropertyUsedInOrderBy" xml:space="preserve">
    <value>The property '{0}' cannot be used in the $orderby query option.</value>
  </data>
  <data name="NotExpandablePropertyUsedInExpand" xml:space="preserve">
    <value>The property '{0}' cannot be used in the $expand query option.</value>
  </data>
  <data name="NotSelectablePropertyUsedInSelect" xml:space="preserve">
    <value>The property '{0}' cannot be used in the $select query option.</value>
  </data>
  <data name="NotNavigablePropertyUsedInNavigation" xml:space="preserve">
    <value>The property '{0}' cannot be used for navigation.</value>
  </data>
  <data name="NotCountablePropertyUsedForCount" xml:space="preserve">
    <value>The property '{0}' cannot be used for $count.</value>
  </data>
  <data name="NotCountableEntitySetUsedForCount" xml:space="preserve">
    <value>The entity set '{0}' cannot be used for $count.</value>
  </data>
  <data name="MaxNodeLimitExceeded" xml:space="preserve">
    <value>The node count limit of '{0}' has been exceeded. To increase the limit, set the '{1}' property on EnableQueryAttribute or ODataValidationSettings.</value>
  </data>
  <data name="QueryNodeValidationNotSupported" xml:space="preserve">
    <value>Validating OData QueryNode of kind {0} is not supported by {1}.</value>
  </data>
  <data name="NotAllowedFunction" xml:space="preserve">
    <value>Function '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.</value>
  </data>
  <data name="OrderByClauseNotSupported" xml:space="preserve">
    <value>Only ordering by properties is supported for non-primitive collections. Expressions are not supported.</value>
  </data>
  <data name="OrderByNodeCountExceeded" xml:space="preserve">
    <value>The number of clauses in $orderby query option exceeded the maximum number allowed. The maximum number of $orderby clauses allowed is {0}.</value>
  </data>
  <data name="OrderByDuplicateProperty" xml:space="preserve">
    <value>Duplicate property named '{0}' is not supported in '$orderby'.</value>
  </data>
  <data name="OrderByDuplicateIt" xml:space="preserve">
    <value>Multiple '$it' nodes are not supported in '$orderby'.</value>
  </data>
  <data name="SelectExpandEmptyOrNull" xml:space="preserve">
    <value>'select' and 'expand' cannot be both null or empty.</value>
  </data>
  <data name="SelectNonStructured" xml:space="preserve">
    <value>The type '{0}' is not a structured type. Only structured types support $select and $expand.</value>
  </data>
  <data name="InvalidExpansionDepthValue" xml:space="preserve">
    <value>'{0}' should be less than or equal to '{1}'.</value>
  </data>
  <data name="MaxExpandDepthExceeded" xml:space="preserve">
    <value>The request includes a $expand path which is too deep. The maximum depth allowed is {0}. To increase the limit, set the '{1}' property on EnableQueryAttribute or ODataValidationSettings, or set the 'MaxDepth' property in ExpandAttribute.</value>
  </data>
  <data name="FunctionNotSupportedOnEnum" xml:space="preserve">
    <value>The '{0}' function cannot be applied to an enumeration-typed argument.</value>
  </data>
  <data name="ConvertToEnumFailed" xml:space="preserve">
    <value>Cannot compare an enum of type '{0}' to an expression of type '{1}'.</value>
  </data>
  <data name="PropertyOrPathWasRemovedFromContext" xml:space="preserve">
    <value>Property or path {0} isn't available in the current context. It was removed in earlier transformation.</value>
  </data>
  <data name="QueryNodeBindingNotSupported" xml:space="preserve">
    <value>Binding OData QueryNode of kind {0} is not supported by {1}.</value>
  </data>
  <data name="BinaryOperatorNotSupported" xml:space="preserve">
    <value>A binary operator with incompatible types was detected. Found operand types '{0}' and '{1}' for operator kind '{2}'.</value>
  </data>
  <data name="InvalidPropertyMapping" xml:space="preserve">
    <value>The key mapping for the property '{0}' can't be null or empty.</value>
  </data>
  <data name="ODataFunctionNotSupported" xml:space="preserve">
    <value>Unknown function '{0}'.</value>
  </data>
  <data name="UriFunctionClrBinderAlreadyBound" xml:space="preserve">
    <value>The function '{0}' is already bound to another method.</value>
  </data>
  <data name="InvalidPropertyMapper" xml:space="preserve">
    <value>The mapper provider must return a valid '{0}' instance for the given '{1}' IEdmType.</value>
  </data>
  <data name="NotSupportedTransformationKind" xml:space="preserve">
    <value>Transformation kind {0} is not supported.</value>
  </data>
  <data name="AggregationNotSupportedForType" xml:space="preserve">
    <value>Aggregation '{0}' not supported for property '{1}' of type '{2}'.</value>
  </data>
  <data name="AggregateKindNotSupported" xml:space="preserve">
    <value>{0} type of aggregation is not supported.</value>
  </data>
  <data name="AggregationMethodNotSupported" xml:space="preserve">
    <value>Aggregation method '{0}' is not supported.</value>
  </data>
  <data name="CannotCastFilter" xml:space="preserve">
    <value>Cannot cast $filter of type '{0}' to type '{1}'.</value>
  </data>
  <data name="MappingDoesNotContainResourceType" xml:space="preserve">
    <value>The provided mapping does not contain a resource for the resource type '{0}'.</value>
  </data>
  <data name="ExpandFilterExpressionNotLambdaExpression" xml:space="preserve">
    <value>$filter in $expand of reference navigation property '{0}' is not expected type '{1}'</value>
  </data>
  <data name="ReferenceNavigationPropertyExpandFilterVisitorUnexpectedParameter" xml:space="preserve">
    <value>Found unexpected parameter '{0}'.</value>
  </data>
</root>